package com.serp.model;

// Generated Apr 13, 2016 8:57:22 AM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "serp")
public class User implements java.io.Serializable {

	private String userId;
	private Role role;
	private String password;
	private String name;
	private Date birthdate;
	private String phonenumber;
	private String email;
	private String address;
	private String department;
	private Integer status;
	private Set<Estimate> estimatesForEsApproverId = new HashSet<Estimate>(0);
	private Set<Orders> ordersesForApprover = new HashSet<Orders>(0);
	private Set<Estimate> estimatesForEsCreatorId = new HashSet<Estimate>(0);
	private Set<Role> rolesForModifier = new HashSet<Role>(0);
	private Set<StockRequisition> stockRequisitionsForCreator = new HashSet<StockRequisition>(
			0);
	private Set<Role> rolesForCreator = new HashSet<Role>(0);
	private Set<Quotation> quotations = new HashSet<Quotation>(0);
	private Set<StockRequisition> stockRequisitionsForFactoryManager = new HashSet<StockRequisition>(
			0);
	private Set<LimitInventory> limitInventoriesForDirectorateId = new HashSet<LimitInventory>(
			0);
	private Set<StockRequisition> stockRequisitionsForHfad = new HashSet<StockRequisition>(
			0);
	private Set<LimitInventory> limitInventoriesForFactoryManagerId = new HashSet<LimitInventory>(
			0);
	private Set<StockRequisition> stockRequisitionsForLastModifiedUser = new HashSet<StockRequisition>(
			0);
	private Set<Orders> ordersesForUserId = new HashSet<Orders>(0);

	public User() {
	}

	public User(String userId, String password, String name,
			Date birthdate, String phonenumber, String email, String address,
			String department, Role role, Integer status) {
		this.userId = userId;		
		this.password = password;
		this.name = name;
		this.birthdate = birthdate;
		this.phonenumber = phonenumber;
		this.email = email;
		this.address = address;
		this.department = department;
		this.role = role;
		this.status = status;		
	}
	
	public User(String userId, Role role, String password, String name,
			Date birthdate, String phonenumber, String email, String address,
			String department, Integer status,
			Set<Estimate> estimatesForEsApproverId,
			Set<Orders> ordersesForApprover,
			Set<Estimate> estimatesForEsCreatorId, Set<Role> rolesForModifier,
			Set<StockRequisition> stockRequisitionsForCreator,
			Set<Role> rolesForCreator, Set<Quotation> quotations,
			Set<StockRequisition> stockRequisitionsForFactoryManager,
			Set<LimitInventory> limitInventoriesForDirectorateId,
			Set<StockRequisition> stockRequisitionsForHfad,
			Set<LimitInventory> limitInventoriesForFactoryManagerId,
			Set<StockRequisition> stockRequisitionsForLastModifiedUser,
			Set<Orders> ordersesForUserId) {
		this.userId = userId;
		this.role = role;
		this.password = password;
		this.name = name;
		this.birthdate = birthdate;
		this.phonenumber = phonenumber;
		this.email = email;
		this.address = address;
		this.department = department;
		this.status = status;
		this.estimatesForEsApproverId = estimatesForEsApproverId;
		this.ordersesForApprover = ordersesForApprover;
		this.estimatesForEsCreatorId = estimatesForEsCreatorId;
		this.rolesForModifier = rolesForModifier;
		this.stockRequisitionsForCreator = stockRequisitionsForCreator;
		this.rolesForCreator = rolesForCreator;
		this.quotations = quotations;
		this.stockRequisitionsForFactoryManager = stockRequisitionsForFactoryManager;
		this.limitInventoriesForDirectorateId = limitInventoriesForDirectorateId;
		this.stockRequisitionsForHfad = stockRequisitionsForHfad;
		this.limitInventoriesForFactoryManagerId = limitInventoriesForFactoryManagerId;
		this.stockRequisitionsForLastModifiedUser = stockRequisitionsForLastModifiedUser;
		this.ordersesForUserId = ordersesForUserId;
	}

	@Id
	@Column(name = "user_id", unique = true, nullable = false, length = 50)
	public String getUserId() {
		return this.userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	// Change fetchType from LAZY to EAGER to get Role (@author: KhangNDD)
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "role_id")
	public Role getRole() {
		return this.role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	@Column(name = "password", length = 50)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "name", length = 50)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "birthdate", length = 10)
	public Date getBirthdate() {
		return this.birthdate;
	}

	public void setBirthdate(Date birthdate) {
		this.birthdate = birthdate;
	}

	@Column(name = "phonenumber", length = 50)
	public String getPhonenumber() {
		return this.phonenumber;
	}

	public void setPhonenumber(String phonenumber) {
		this.phonenumber = phonenumber;
	}

	@Column(name = "email", length = 50)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "address", length = 50)
	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	@Column(name = "department", length = 50)
	public String getDepartment() {
		return this.department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	@Column(name = "status")
	public Integer getStatus() {
		return this.status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByEsApproverId")
	public Set<Estimate> getEstimatesForEsApproverId() {
		return this.estimatesForEsApproverId;
	}

	public void setEstimatesForEsApproverId(
			Set<Estimate> estimatesForEsApproverId) {
		this.estimatesForEsApproverId = estimatesForEsApproverId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByApprover")
	public Set<Orders> getOrdersesForApprover() {
		return this.ordersesForApprover;
	}

	public void setOrdersesForApprover(Set<Orders> ordersesForApprover) {
		this.ordersesForApprover = ordersesForApprover;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByEsCreatorId")
	public Set<Estimate> getEstimatesForEsCreatorId() {
		return this.estimatesForEsCreatorId;
	}

	public void setEstimatesForEsCreatorId(Set<Estimate> estimatesForEsCreatorId) {
		this.estimatesForEsCreatorId = estimatesForEsCreatorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByModifier")
	public Set<Role> getRolesForModifier() {
		return this.rolesForModifier;
	}

	public void setRolesForModifier(Set<Role> rolesForModifier) {
		this.rolesForModifier = rolesForModifier;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreator")
	public Set<StockRequisition> getStockRequisitionsForCreator() {
		return this.stockRequisitionsForCreator;
	}

	public void setStockRequisitionsForCreator(
			Set<StockRequisition> stockRequisitionsForCreator) {
		this.stockRequisitionsForCreator = stockRequisitionsForCreator;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreator")
	public Set<Role> getRolesForCreator() {
		return this.rolesForCreator;
	}

	public void setRolesForCreator(Set<Role> rolesForCreator) {
		this.rolesForCreator = rolesForCreator;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Quotation> getQuotations() {
		return this.quotations;
	}

	public void setQuotations(Set<Quotation> quotations) {
		this.quotations = quotations;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByFactoryManager")
	public Set<StockRequisition> getStockRequisitionsForFactoryManager() {
		return this.stockRequisitionsForFactoryManager;
	}

	public void setStockRequisitionsForFactoryManager(
			Set<StockRequisition> stockRequisitionsForFactoryManager) {
		this.stockRequisitionsForFactoryManager = stockRequisitionsForFactoryManager;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByDirectorateId")
	public Set<LimitInventory> getLimitInventoriesForDirectorateId() {
		return this.limitInventoriesForDirectorateId;
	}

	public void setLimitInventoriesForDirectorateId(
			Set<LimitInventory> limitInventoriesForDirectorateId) {
		this.limitInventoriesForDirectorateId = limitInventoriesForDirectorateId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByHfad")
	public Set<StockRequisition> getStockRequisitionsForHfad() {
		return this.stockRequisitionsForHfad;
	}

	public void setStockRequisitionsForHfad(
			Set<StockRequisition> stockRequisitionsForHfad) {
		this.stockRequisitionsForHfad = stockRequisitionsForHfad;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByFactoryManagerId")
	public Set<LimitInventory> getLimitInventoriesForFactoryManagerId() {
		return this.limitInventoriesForFactoryManagerId;
	}

	public void setLimitInventoriesForFactoryManagerId(
			Set<LimitInventory> limitInventoriesForFactoryManagerId) {
		this.limitInventoriesForFactoryManagerId = limitInventoriesForFactoryManagerId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByLastModifiedUser")
	public Set<StockRequisition> getStockRequisitionsForLastModifiedUser() {
		return this.stockRequisitionsForLastModifiedUser;
	}

	public void setStockRequisitionsForLastModifiedUser(
			Set<StockRequisition> stockRequisitionsForLastModifiedUser) {
		this.stockRequisitionsForLastModifiedUser = stockRequisitionsForLastModifiedUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUserId")
	public Set<Orders> getOrdersesForUserId() {
		return this.ordersesForUserId;
	}

	public void setOrdersesForUserId(Set<Orders> ordersesForUserId) {
		this.ordersesForUserId = ordersesForUserId;
	}

}
